@using Project.Resources
@model Project.ViewModel.Create_Invoice
@{
	ViewBag.Title = "Create";
	Layout = "~/Views/Shared/_LayoutBasic.cshtml";
}
<div class="container mt-5">
	<h1 class="text-center">@Resource.Invoice</h1>
	<div class="row">
		<div class="col-lg-3 col-md-6 col-sm-12 mb-4">
			@Html.Label(@Resource.Customer)
			@Html.DropDownListFor(p => p.CustomerId, ViewData["CustomerId"] as SelectList, new { @class = "form-control" })
			@Html.ValidationMessageFor(p => p.CustomerId, "", new { @class = "text-danger" })
		</div>

		<div class="col-lg-3 col-md-6 col-sm-12 mb-4">
			@Html.Label(@Resource.date)
			<input class="form-control" type="datetime-local" disabled id="datetime" />
		</div>
		<div class="col-lg-3 col-md-6 col-sm-12 mb-4">

			@Html.Label(Resource.Category)
			@Html.DropDownList(Resource.Category, ViewData["CategoryId"] as SelectList, new { @class = "form-control", @id = "selectcatogray" })
		</div>
		<div class="col-lg-3 col-md-6 col-sm-12 mb-4">

			@Html.Label(Resource.Product)
			<select id="selectproduct" class="form-control">
				
			</select>
		</div>
		<div class="table-responsive">
			<table class="table table-hover table-responsive" id="myTable">
				<thead>
					<tr>
						<th scope="col">@Resource.image</th>
						<th scope="col">@Resource.ProductName</th>
						<th scope="col">@Resource.Quantity</th>
						<th scope="col">@Resource.Price</th>
						<th scope="col">@Resource.Number</th>
						<th scope="col">@Resource.discount</th>
						<th scope="col">@Resource.total</th>
						<th scope="col"></th>
					</tr>
				</thead>
				<tbody id="data">
				</tbody>
			</table>
		</div>

		<div class="col-12 mb-4">
			@Html.Label(@Resource.total_discound)
			<br />
			@Html.EditorFor(p => p.Discount, new { @class = "form-control" })
		</div>

		<div class="col-12 mb-4">
			@Html.Label(@Resource.total_money)
			<input class="form-control" type="number" disabled id="total_money" />
		</div>

		<div class="col-12 mb-4">
			<button class="btn btn-primary w-100" onclick="create_invoice()" style="font-size: 1.25rem;">@Resource.add</button>
		</div>
	</div>
</div>


@section vaild{

	@Scripts.Render("~/script")


}
@section js{

	<script>
	$(document).ready(function () {
		var All_value_quantity = document.querySelectorAll('.quantity');
		var All_value_discound = document.querySelectorAll('.discound');

		//get all product for category
		function loadProducts(categoryId)
		{

			$.ajax({
				url: "/Product/getproductss",
				type: "GET",
				data: { id: categoryId },
				success: function (data) {
					console.log(data);
					createoptions(data);
				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}
		var defaultCategoryId = $('#selectcatogray').val();
		loadProducts(defaultCategoryId);


		$('#selectcatogray').change(function () {
			var id = $(this).val();
			loadProducts(id);
		});

		//add option in selectproduct
		function createoptions(data) {
			let selectElements = document.getElementById('selectproduct');
			selectElements.innerHTML = '';
			selectElements.innerHTML +='<option></option>'
			data.forEach(p => {
				let option = document.createElement('option');
				option.value = p.Id;
				option.textContent = p.Name;
				selectElements.appendChild(option);
			});
		}

		/********************************************************************* */

		//add item in invoice
		$('#selectproduct').change(function () {
			var id = $(this).val();

			$.ajax({
				url: "/Product/getproduct",
				type: "GET",
				data: { id: id },
				success: function (pr) {
					console.log(pr);
					additem(pr);
				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		});

		function additem(pr) {
			var row = document.getElementById('data');
			
			
				var newRow = document.createElement('tr');
				newRow.classList.add('table-secondary');


				newRow.innerHTML = `
            <td><img class="product_image" src="${pr.image}" width="15%"></td>
            <td>${pr.ProductName}</td>
            <td class="quantity_db" data-id="${pr.id}">${pr.Quantity}</td>
            <td class="price_item" data-id="${pr.id}">${pr.Price}</td>
            <td><input type="number" class="quantity form-control" data-id="${pr.id}" /></td>
            <td><input type="number" class="discound form-control" data-id="${pr.id}" /></td>
            <td class="total_price" data-id="${pr.id}"></td>
            <td><button id="deletitem" data-id="${pr.id}" class="btn btn-danger">@Resource.delete</button></td>
        `;


				row.appendChild(newRow);

				All_value_quantity = document.querySelectorAll('.quantity');
				All_value_discound = document.querySelectorAll('.discound');
				updateinput();
				updateTotalPrices();

			
		}


		/********************************************************************* */
		// Calculate date invoice
		const now = new Date();
		const formattedDate = now.toISOString().slice(0, 16);
		document.getElementById("datetime").value = formattedDate;

		// Calculate money for each product
		function updateinput() {


			All_value_quantity.forEach(quantity => {
				quantity.addEventListener('input', function () {
					let id = this.getAttribute('data-id');
					let q_db = document.querySelector(`.quantity_db[data-id="${id}"]`).textContent;
					let value_int = this.value;

					setTimeout(() => {
						if (value_int < 0 || value_int > q_db) {
							alert("Enter correct data for quantity");
							this.value = '';
						}
						updateTotalPrices();
					}, 100);
				});
			});

			All_value_discound.forEach(discound => {
				discound.addEventListener('input', function () {
					let id = this.getAttribute('data-id');
					let p = parseFloat(document.querySelector(`.price_item[data-id="${id}"]`).textContent);
					let value_int = this.value;
					console.log(value_int);

					setTimeout(() => {
						if (this.value && (value_int < 0 || value_int > p)) {
							alert("Enter correct data for discount");
							this.value = '';
						}
						updateTotalPrices();
					}, 100);
				});
			});
		}

		function updateTotalPrices() {
			All_value_quantity.forEach(q => {
				let id = q.getAttribute('data-id');
				let d = document.querySelector(`.discound[data-id="${id}"]`).value || 0;
				let price = document.querySelector(`.price_item[data-id="${id}"]`).textContent;
				let quantity = q.value;

				if (quantity === "" || isNaN(quantity) || quantity <= 0) {
					document.querySelector(`.total_price[data-id="${id}"]`).textContent = 0;
					total_money();
				} else {
					let total = (quantity * price) - d;
					document.querySelector(`.total_price[data-id="${id}"]`).textContent = total;
					total_money();
				}
			});
		}



		let value_Discount = 0;

		// Calculate total money
		document.getElementById('Discount').addEventListener('input', function () {
			value_Discount = parseFloat(this.value);
			let total = parseFloat(document.getElementById('total_money').value);
			setTimeout(() => {
				if (this.value && (this.value < 0 || this.value > total)) {
					alert("Enter correct data for total discount");
					this.value = '';
					return;
				}
				total_money();
			}, 100);
		});

		function total_money() {
			var total_price_product = document.querySelectorAll('.total_price');
			let total = 0;
			total_price_product.forEach(p => {
				total += parseFloat(p.textContent) || 0;
			});

			if (value_Discount > 0) {
				document.getElementById('total_money').value = total - value_Discount;
			} else {
				document.getElementById('total_money').value = total;
			}
		}
		// Delete row
		$(document).on('click', '#deletitem', function () {


			var isdelete = confirm("Are you sure you don't want to buy it?");
			if (isdelete) {
				var row = $(this).closest('tr');
				var rowIndex = row[0].rowIndex;

				document.getElementById("myTable").deleteRow(rowIndex);
			}
			All_value_quantity = document.querySelectorAll('.quantity');
			All_value_discound = document.querySelectorAll('.discound');
			updateinput();

			updateTotalPrices();
			total_money();
		});




	});
		var invoiceItem = [];
		function create_invoice() {

			var Alldata = document.querySelectorAll('.table-secondary');
			Alldata.forEach(p => {
				let ProductId = p.querySelector('.quantity_db').getAttribute('data-id');
				let Quantity = p.querySelector('.quantity').value;
				let Discount = p.querySelector('.discound').value;
				let TotalPrice = p.querySelector('.total_price').textContent;
				let UnitPrice = p.querySelector('.price_item').textContent;

				let data_product = {
					ProductId: parseInt(ProductId),
					Quantity: parseInt(Quantity) || 0,
					Discount: parseFloat(Discount) || 0,
					TotalPrice: parseFloat(TotalPrice) || 0,
					UnitPrice: parseFloat(UnitPrice)
				};
				invoiceItem.push(data_product);
			});
			let invoice = {
				InvoiceDate: document.getElementById("datetime").value,
				TotalAmount: parseFloat(document.getElementById('total_money').value) || 0,
				CustomerId: parseInt(document.getElementById("CustomerId").value),
				Discount: parseFloat(document.getElementById('Discount').value) || 0,
				Items: invoiceItem
			};

			$.ajax({
				url: "/Invoice/Create",
				type: "POST",
				data: { invoice: invoice },
				success: function (response) {
					console.log(response)
					if (response.success) {

						window.location.href = response.redirectUrl;
					}
				},
				//error: function (errormessage) {
				//	console.log(errormessage);
				//	alert(errormessage.responseText);
				//}
				error: function (xhr, status, error) {
					console.log("Error: " + error);
					console.log("Response: " + xhr.responseText);
				}
			});
		}

	</script>



}
